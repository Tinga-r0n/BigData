/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package project.usermanagementcrud;

//import static com.mongodb.client.model.Filters.eq;
import com.mongodb.DBObject;
import com.mongodb.ErrorCategory;
import com.mongodb.MongoClient;
import com.mongodb.MongoException;
import com.mongodb.MongoWriteException;
import com.mongodb.client.MongoClients;
import com.mongodb.client.MongoCollection;
import com.mongodb.client.MongoDatabase;
import java.awt.BorderLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.net.UnknownHostException;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JButton;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JPasswordField;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;
import org.bson.Document;
import com.mongodb.client.*;
import com.mongodb.client.model.Filters;
import static com.mongodb.client.model.Filters.eq;
import com.mongodb.client.model.UpdateOptions;
import com.mongodb.client.model.Updates;
import com.mongodb.client.result.DeleteResult;
import com.mongodb.client.result.UpdateResult;
import org.bson.Document;
import org.bson.conversions.Bson;

/**
 *
 * @author Student.admin
 */
public class UserManagement extends javax.swing.JFrame {

    /**
     * Creates new form Users
     */
    private MongoClient client;
    JTextField fn = new JTextField();
    JTextField ln = new JTextField();
    JTextField e = new JTextField();
    JTextField pa = new JTextField();

    public UserManagement() {
        initComponents();
        this.setLocationRelativeTo(null);
        crudRead();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        addAdmin = new javax.swing.JButton();
        jComboBox1 = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();
        removeUser = new javax.swing.JButton();
        disableUser = new javax.swing.JButton();
        changeRole = new javax.swing.JButton();
        changePass = new javax.swing.JButton();
        approveUser = new javax.swing.JButton();
        declineUser = new javax.swing.JButton();
        jButton10 = new javax.swing.JButton();
        enableUser = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel2.setBackground(new java.awt.Color(204, 204, 204));

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "First Name", "Last Name", "Email", "Password", "Role", "Status"
            }
        ));
        jScrollPane2.setViewportView(jTable2);

        addAdmin.setFont(new java.awt.Font("Tahoma", 1, 15)); // NOI18N
        addAdmin.setText("Add Admin");
        addAdmin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addAdminActionPerformed(evt);
            }
        });

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select", "to be approved", "inactive", "active" }));
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        jLabel2.setText("Filter status by");

        jButton3.setText("Refresh");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        removeUser.setFont(new java.awt.Font("Tahoma", 1, 15)); // NOI18N
        removeUser.setText("Remove User");
        removeUser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeUserActionPerformed(evt);
            }
        });

        disableUser.setFont(new java.awt.Font("Tahoma", 1, 15)); // NOI18N
        disableUser.setText("Disable User");
        disableUser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                disableUserActionPerformed(evt);
            }
        });

        changeRole.setFont(new java.awt.Font("Tahoma", 1, 15)); // NOI18N
        changeRole.setText("Change Role");
        changeRole.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                changeRoleActionPerformed(evt);
            }
        });

        changePass.setFont(new java.awt.Font("Tahoma", 1, 15)); // NOI18N
        changePass.setText("Change Password");
        changePass.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                changePassActionPerformed(evt);
            }
        });

        approveUser.setFont(new java.awt.Font("Tahoma", 1, 15)); // NOI18N
        approveUser.setText("Approve User");
        approveUser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                approveUserActionPerformed(evt);
            }
        });

        declineUser.setFont(new java.awt.Font("Tahoma", 1, 15)); // NOI18N
        declineUser.setText("Decline User");
        declineUser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                declineUserActionPerformed(evt);
            }
        });

        jButton10.setFont(new java.awt.Font("Tahoma", 1, 15)); // NOI18N
        jButton10.setText("Logout");
        jButton10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton10ActionPerformed(evt);
            }
        });

        enableUser.setFont(new java.awt.Font("Tahoma", 1, 15)); // NOI18N
        enableUser.setText("Enable User");
        enableUser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                enableUserActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(addAdmin)
                        .addGap(15, 15, 15)
                        .addComponent(removeUser)
                        .addGap(15, 15, 15)
                        .addComponent(disableUser)
                        .addGap(15, 15, 15)
                        .addComponent(enableUser)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(changeRole)
                        .addGap(15, 15, 15)
                        .addComponent(changePass)
                        .addGap(15, 15, 15)
                        .addComponent(approveUser, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(15, 15, 15)
                        .addComponent(declineUser, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(18, 18, 18)
                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 197, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(30, 30, 30)
                        .addComponent(jButton3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton10, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(10, 10, 10))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(jButton3)
                    .addComponent(jButton10, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(11, 11, 11)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addAdmin, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(removeUser, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(disableUser, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(changeRole, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(changePass, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(approveUser, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(declineUser, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(enableUser, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(20, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1198, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addContainerGap()))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 582, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public void crudRead() {
        DefaultTableModel tm = (DefaultTableModel) jTable2.getModel();
        String uri = "mongodb://localhost:27017";
        com.mongodb.client.MongoClient mongoClient = MongoClients.create(uri);
        MongoDatabase database = mongoClient.getDatabase("UserManagement");
        MongoCollection<Document> collection = database.getCollection("UserCollection");

        MongoCursor<Document> cursor = collection.find().iterator();
        try {
            while (cursor.hasNext()) {
//                System.out.println(cursor.next().toJson());
                Document obj = cursor.next();
                String first = (String) obj.get("firstName");
                String last = (String) obj.get("lastName");
                String pass = (String) obj.get("password");
                String email = (String) obj.get("email");
                String role = (String) obj.get("role");
                String status = (String) obj.get("status");

                tm.addRow(new Object[]{first, last, email, pass, role, status});
            }
        } finally {
            cursor.close();
            mongoClient.close();
        }

    }

    public void crudDelete(String email) {
        String uri = "mongodb://localhost:27017";
        com.mongodb.client.MongoClient mongoClient = MongoClients.create(uri);
        MongoDatabase database = mongoClient.getDatabase("UserManagement");

        MongoCollection<Document> collection = database.getCollection("UserCollection");

        Bson query = eq("email", email);
        try {
            DeleteResult result = collection.deleteOne(query);
//            System.out.println("Deleted document count: " + result.getDeletedCount());
//                Bson filter = eq("email","sample@mail.com");
//                collection.deleteOne(filter);
        } catch (MongoException me) {
            System.err.println("Unable to delete due to an error: " + me);
        }
    }

    public void crudInsert() {

        //Insert a document into the "characters" collection.
        String uri = "mongodb://localhost:27017";
        com.mongodb.client.MongoClient mongoClient = MongoClients.create(uri);
        MongoDatabase database = mongoClient.getDatabase("UserManagement");
        MongoCollection<Document> collection = database.getCollection("UserCollection");

        Document admin = new Document();

//
//            mickeyMouse
//                    .append("firstName", firstName.getText())
//                    .append("lastName", lastName.getText()).append("email", email.getText()).append("password", String.valueOf(password.getPassword())).append("role", value).append("status","active");
//
//           
        admin.append("firstName", fn.getText()).append("lastName", ln.getText()).append("email", e.getText()).append("password", pa.getText()).append("role", "admin").append("status", "active");
        try {
            collection.insertOne(admin);

            System.out.println("Successfully inserted documents. \n");
        } catch (MongoWriteException mwe) {
            if (mwe.getError().getCategory().equals(ErrorCategory.DUPLICATE_KEY)) {

                System.out.println("Document with that id already exists");
            }
        }
    }
    private void addAdminActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addAdminActionPerformed

        Object[] user = {
            "First Name:", fn,
            "Last Name:", ln,
            "Email:", e,
            "Password:", pa

        };

        int option = JOptionPane.showConfirmDialog(null, user, "Add Admin", JOptionPane.OK_CANCEL_OPTION);
        if (option == JOptionPane.OK_OPTION) {
            crudInsert();

        }
    }//GEN-LAST:event_addAdminActionPerformed


    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        String value = jComboBox1.getSelectedItem().toString();
        DefaultTableModel tm = (DefaultTableModel) jTable2.getModel();
        String uri = "mongodb://localhost:27017";
        com.mongodb.client.MongoClient mongoClient = MongoClients.create(uri);
        MongoDatabase database = mongoClient.getDatabase("UserManagement");
        MongoCollection<Document> collection = database.getCollection("UserCollection");

        if (value.equals("inactive")) {
            Bson query = eq("status", "inactive");
            MongoCursor<Document> cursor = collection.find(query).iterator();

            try {
                tm.setRowCount(0);
                while (cursor.hasNext()) {
//                System.out.println(cursor.next().toJson());
                    Document obj = cursor.next();
                    String first = (String) obj.get("firstName");
                    String last = (String) obj.get("lastName");
                    String pass = (String) obj.get("password");
                    String email = (String) obj.get("email");
                    String role = (String) obj.get("role");
                    String status = (String) obj.get("status");

                    tm.addRow(new Object[]{first, last, email, pass, role, status});
                }
            } finally {
                cursor.close();
                mongoClient.close();
            }

        }
        if (value.equals("active")) {
            Bson query = eq("status", "active");
            MongoCursor<Document> cursor = collection.find(query).iterator();
            try {
                tm.setRowCount(0);
                while (cursor.hasNext()) {
//                System.out.println(cursor.next().toJson());
                    Document obj = cursor.next();
                    String first = (String) obj.get("firstName");
                    String last = (String) obj.get("lastName");
                    String pass = (String) obj.get("password");
                    String email = (String) obj.get("email");
                    String role = (String) obj.get("role");
                    String status = (String) obj.get("status");

                    tm.addRow(new Object[]{first, last, email, pass, role, status});
                }
            } finally {
                cursor.close();
                mongoClient.close();
            }

        }
        if (value.equals("to be approved")) {
            Bson query = eq("status", "to be approved");
            MongoCursor<Document> cursor = collection.find(query).iterator();
            try {
                tm.setRowCount(0);
                while (cursor.hasNext()) {
//                System.out.println(cursor.next().toJson());
                    Document obj = cursor.next();
                    String first = (String) obj.get("firstName");
                    String last = (String) obj.get("lastName");
                    String pass = (String) obj.get("password");
                    String email = (String) obj.get("email");
                    String role = (String) obj.get("role");
                    String status = (String) obj.get("status");

                    tm.addRow(new Object[]{first, last, email, pass, role, status});
                }
            } finally {
                cursor.close();
                mongoClient.close();
            }

        }
    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        crudRead();
        jComboBox1.setSelectedItem("Select");
    }//GEN-LAST:event_jButton3ActionPerformed

    private void removeUserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeUserActionPerformed

        DefaultTableModel tm = (DefaultTableModel) jTable2.getModel();

        if (jTable2.getSelectedRowCount() > 0) {
            int row = jTable2.getSelectedRow();
            String email = jTable2.getModel().getValueAt(row, 2).toString();
            crudDelete(email);
            tm.setRowCount(0);
            crudRead();
        }

    }//GEN-LAST:event_removeUserActionPerformed

    private void disableUserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_disableUserActionPerformed
        DefaultTableModel tm = (DefaultTableModel) jTable2.getModel();

        if (jTable2.getSelectedRowCount() > 0) {

            int row = jTable2.getSelectedRow();
            String email = jTable2.getModel().getValueAt(row, 2).toString();

            String uri = "mongodb://localhost:27017";
            com.mongodb.client.MongoClient mongoClient = MongoClients.create(uri);
            MongoDatabase database = mongoClient.getDatabase("UserManagement");
            MongoCollection<Document> collection = database.getCollection("UserCollection");
            Document query = new Document().append("email", email);
            Bson updates = Updates.combine(
                    Updates.set("status", "inactive"));

            UpdateOptions options = new UpdateOptions().upsert(true);
            try {
                UpdateResult result = collection.updateOne(query, updates, options);
                System.out.println("Modified document count: " + result.getModifiedCount());
                System.out.println("Upserted id: " + result.getUpsertedId()); // only contains a value when an upsert is performed
            } catch (MongoException me) {
                System.err.println("Unable to update due to an error: " + me);
            }

            tm.setRowCount(0);
            crudRead();

        }


    }//GEN-LAST:event_disableUserActionPerformed

    private void changeRoleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_changeRoleActionPerformed

        DefaultTableModel tm = (DefaultTableModel) jTable2.getModel();

        if (jTable2.getSelectedRowCount() > 0) {

            int row = jTable2.getSelectedRow();
            String email = jTable2.getModel().getValueAt(row, 2).toString();

            JTextField ro = new JTextField();

            Object[] role = {
                "Role:", ro,};

            int option = JOptionPane.showConfirmDialog(null, role, "Change Role", JOptionPane.OK_CANCEL_OPTION);
            if (option == JOptionPane.OK_OPTION) {
                String uri = "mongodb://localhost:27017";
                com.mongodb.client.MongoClient mongoClient = MongoClients.create(uri);
                MongoDatabase database = mongoClient.getDatabase("UserManagement");
                MongoCollection<Document> collection = database.getCollection("UserCollection");
                Document query = new Document().append("email", email);
                Bson updates = Updates.combine(
                        Updates.set("role", ro.getText()));

                UpdateOptions options = new UpdateOptions().upsert(true);
                try {
                    UpdateResult result = collection.updateOne(query, updates, options);
                    System.out.println("Modified document count: " + result.getModifiedCount());
                    System.out.println("Upserted id: " + result.getUpsertedId()); // only contains a value when an upsert is performed
                } catch (MongoException me) {
                    System.err.println("Unable to update due to an error: " + me);
                }

                tm.setRowCount(0);
                crudRead();

            }

        }


    }//GEN-LAST:event_changeRoleActionPerformed

    private void changePassActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_changePassActionPerformed

        DefaultTableModel tm = (DefaultTableModel) jTable2.getModel();

        if (jTable2.getSelectedRowCount() > 0) {

            int row = jTable2.getSelectedRow();
            String email = jTable2.getModel().getValueAt(row, 2).toString();
            JTextField pass = new JTextField();

            Object[] role = {
                "New Password:", pass,};

            int option = JOptionPane.showConfirmDialog(null, role, "Change Password", JOptionPane.OK_CANCEL_OPTION);

            if (option == JOptionPane.OK_OPTION) {
                String uri = "mongodb://localhost:27017";
                com.mongodb.client.MongoClient mongoClient = MongoClients.create(uri);
                MongoDatabase database = mongoClient.getDatabase("UserManagement");
                MongoCollection<Document> collection = database.getCollection("UserCollection");
                Document query = new Document().append("email", email);
                Bson updates = Updates.combine(
                        Updates.set("password", pass.getText()));

                UpdateOptions options = new UpdateOptions().upsert(true);
                try {
                    UpdateResult result = collection.updateOne(query, updates, options);
                    System.out.println("Modified document count: " + result.getModifiedCount());
                    System.out.println("Upserted id: " + result.getUpsertedId()); // only contains a value when an upsert is performed
                } catch (MongoException me) {
                    System.err.println("Unable to update due to an error: " + me);
                }

                tm.setRowCount(0);
                crudRead();

            }

        }


    }//GEN-LAST:event_changePassActionPerformed

    private void approveUserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_approveUserActionPerformed

        DefaultTableModel tm = (DefaultTableModel) jTable2.getModel();

        if (jTable2.getSelectedRowCount() > 0) {

            int row = jTable2.getSelectedRow();
            String email = jTable2.getModel().getValueAt(row, 2).toString();
            String stat = jTable2.getModel().getValueAt(row, 5).toString();

            if (stat.equals("to be approved")) {

                String uri = "mongodb://localhost:27017";
                com.mongodb.client.MongoClient mongoClient = MongoClients.create(uri);
                MongoDatabase database = mongoClient.getDatabase("UserManagement");
                MongoCollection<Document> collection = database.getCollection("UserCollection");
                Document query = new Document().append("email", email);
                Bson updates = Updates.combine(
                        Updates.set("status", "active"));

                UpdateOptions options = new UpdateOptions().upsert(true);
                try {
                    UpdateResult result = collection.updateOne(query, updates, options);
                    System.out.println("Modified document count: " + result.getModifiedCount());
                    System.out.println("Upserted id: " + result.getUpsertedId()); // only contains a value when an upsert is performed
                } catch (MongoException me) {
                    System.err.println("Unable to update due to an error: " + me);
                }

                tm.setRowCount(0);
                crudRead();

            }

        }
    }//GEN-LAST:event_approveUserActionPerformed

    private void declineUserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_declineUserActionPerformed

        DefaultTableModel tm = (DefaultTableModel) jTable2.getModel();

        if (jTable2.getSelectedRowCount() > 0) {
            int row = jTable2.getSelectedRow();
            String stat = jTable2.getModel().getValueAt(row, 5).toString();

            if (stat.equals("to be approved")) {

                String email = jTable2.getModel().getValueAt(row, 2).toString();
                crudDelete(email);
                tm.setRowCount(0);
                crudRead();
            }

        }


    }//GEN-LAST:event_declineUserActionPerformed

    private void jButton10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton10ActionPerformed
        this.dispose();
        new Login().setVisible(true);
    }//GEN-LAST:event_jButton10ActionPerformed

    private void enableUserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_enableUserActionPerformed

        DefaultTableModel tm = (DefaultTableModel) jTable2.getModel();

        if (jTable2.getSelectedRowCount() > 0) {

            int row = jTable2.getSelectedRow();
            String email = jTable2.getModel().getValueAt(row, 2).toString();

            String uri = "mongodb://localhost:27017";
            com.mongodb.client.MongoClient mongoClient = MongoClients.create(uri);
            MongoDatabase database = mongoClient.getDatabase("UserManagement");
            MongoCollection<Document> collection = database.getCollection("UserCollection");
            Document query = new Document().append("email", email);
            Bson updates = Updates.combine(
                    Updates.set("status", "active"));

            UpdateOptions options = new UpdateOptions().upsert(true);
            try {
                UpdateResult result = collection.updateOne(query, updates, options);
                System.out.println("Modified document count: " + result.getModifiedCount());
                System.out.println("Upserted id: " + result.getUpsertedId()); // only contains a value when an upsert is performed
            } catch (MongoException me) {
                System.err.println("Unable to update due to an error: " + me);
            }

            tm.setRowCount(0);
            crudRead();

        }
    }//GEN-LAST:event_enableUserActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(UserManagement.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(UserManagement.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(UserManagement.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(UserManagement.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new UserManagement().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addAdmin;
    private javax.swing.JButton approveUser;
    private javax.swing.JButton changePass;
    private javax.swing.JButton changeRole;
    private javax.swing.JButton declineUser;
    private javax.swing.JButton disableUser;
    private javax.swing.JButton enableUser;
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton3;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable2;
    private javax.swing.JButton removeUser;
    // End of variables declaration//GEN-END:variables
}
